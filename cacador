#!/bin/bash
# File: cacador.sh
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.



IMG_EXT="jpg jpeg png"

usage() (
    echo "$0   [OPTIONS...] <DIRECTORY>"
)

help() (
    usage
    echo "	-h Show this help message."
    echo "	-V Show the version."
    echo "	-T Title (default: Gallery)."
    echo "	-s Modify normal size (default: '800x')."
    echo "	-H Generate HTML files only."
    echo "	-t Use designed templates."
    echo "	-o Change output directory."

)



html=0
output=Images
extension=jpg
tiny_size=160x
normal_size=800x
title=Gallery
quality=80

tiny=tiny
normal=medium
orig=original

template=supersimple
stylesheet=templates/$template/style.css

output_tiny="$output/$tiny"
output_orig="$output/$orig"
output_normal="$output/$normal"
output_html="$output/html"

while getopts "hVs:HT:t:o" Option


do
  case $Option in
    h) 	help
	exit 0
	;;
    V)	echo "Cacador v0.99 by OffWorlApps : https://github.com/OffWorldApps/ "
	exit 0
	;;
    s ) normal_size=$OPTARG
      ;;
    H) html=1
    ;;
    T) title=$OPTARG
    ;;
    t) template=$OPTARG
    ;;
    o) output=$OPTARG
    ;;
   esac
done
shift $(($OPTIND - 1))

# echo $normal_size

if [ -e "$1" ]
  then


mkdir -p "$output"
mkdir -p "$output_normal"
mkdir -p "$output_tiny"
mkdir -p "$output_orig"
mkdir -p "$output_html"

for ext in $IMG_EXT
do
    find_filter="$find_filter -iname \"*.$ext\" -o"
done
find_filter="$find_filter -false"


files=$(eval find $1 $find_filter  | xargs echo)

cp $files $output_orig



for img in `ls $output_orig`
do
  i=$((${i}+1))
  liste[${i}]=$img
done

nombre_fichiers=$i
echo "$nombre_fichiers images"

j=0
k=0
l=0




for img in `ls $output_orig`
do
  image=$img
  j=$(($j+1))

  echo "Traitement de l'image : $img"
  
#   Conversion des images
  if [ $html -ne 1 ]
    then
      convert  -quality $quality   -auto-orient -resize $normal_size $output_orig/$img $output_normal/${img}_n.$extension
      convert  -quality $quality -auto-orient  -resize $tiny_size   $output_normal/${img}_n.$extension $output_tiny/${img}_p.$extension
   fi
   
#  Taille des images à télécharger  
  size=`ls -lh  $output_orig/$img | cut -d " " -f5`
  if [ $j -gt 1 ]
    then
    k=$(($j-1))
    img_previous=${liste[$k]}
    link_previous="<a href=\"${img_previous}.html\"><img alt=\"$img_previous \" src=\"../$tiny/${img_previous}_p.$extension\" ></a>"
  fi 
  
  if [ $j -lt $nombre_fichiers ]
    then
      l=$(($j+1))
      img_next=${liste[$l]}
      link_next="<a href=\"${img_next}.html\"><img alt=\"$img_next \" src=\"../$tiny/${img_next}_p.$extension\" ></a>"
    else
      unset link_next
  fi  

#   Lien vers l'image originale
  image_original_link="<a href=\"../$orig/$img\">$img (${size}o)</a>"
  

  
 
  export title image_original_link image normal link_next link_previous extension;
  envsubst < templates/$template/img.html >$output_html/$img.html

done



for img in `ls  $output_orig`
  do
    image_links="$image_links  <a href=\"html/${img}.html\"><img alt=\"$img\"
    src=\"$tiny/${img}_p.jpg\"/></a>"
  done

  export image_links img tiny
  envsubst < templates/$template/index.html >$output/index.html

cp $stylesheet $output_html

else
usage
exit 0
fi
# done